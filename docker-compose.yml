version: '3.8'

services:
  db:
    image: postgres:16
    environment:
      POSTGRES_DB: library_db
      POSTGRES_USER: library_user
      POSTGRES_PASSWORD: secure_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - library-network

  web1:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      DB_HOST: db
      DB_NAME: library_db
      DB_USER: library_user
      DB_PASSWORD: secure_password
      SECRET_KEY: "django-insecure-ra+$$gw#tqc#=5bcd+fj34mvf50y8xqr!k2&nd5o^!vo-d66$$ar"
    depends_on:
      - db
    command: >
      sh -c "python manage.py migrate --noinput &&
             python manage.py collectstatic --noinput &&
             gunicorn --bind 0.0.0.0:8001 --reload library_project.wsgi:application"
    networks:
      - library-network
    ports:
      - "8001:8001"
    volumes:
      - static_volume:/app/staticfiles
      - ./backend:/app

  web2:
    build: 
      context: .
      dockerfile: Dockerfile
    environment:
      DB_HOST: db
      DB_NAME: library_db
      DB_USER: library_user
      DB_PASSWORD: secure_password
      SECRET_KEY: "django-insecure-ra+$$gw#tqc#=5bcd+fj34mvf50y8xqr!k2&nd5o^!vo-d66$$ar"
    depends_on:
      - db
    command: >
      sh -c "python manage.py migrate --noinput &&
             gunicorn --bind 0.0.0.0:8002 --reload library_project.wsgi:application"
    networks:
      - library-network
    ports:
      - "8002:8002"
    volumes:
      - static_volume:/app/staticfiles
      - ./backend:/app

  nginx:
    image: nginx:alpine
    build:
      context: ./docker/nginx 
      dockerfile: Dockerfile
    ports:
      - "8000:80"
    depends_on:
      - web1
      - web2
    networks:
      - library-network
    volumes:
      - static_volume:/app/staticfiles

  redis:
    image: redis:7-alpine
    restart: always
    volumes:
      - redis_data:/data
    networks:
      - library-network

volumes:
  postgres_data:
  redis_data:
  static_volume:

networks:
  library-network:
    driver: bridge